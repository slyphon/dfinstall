import datetime as dt
import typing
from marshmallow import types
from marshmallow.base import FieldABC, SchemaABC
from marshmallow.exceptions import ValidationError
from typing import Any, Optional


class Field(FieldABC):
  default_error_messages: Any = ...
  default: Any = ...
  attribute: Any = ...
  data_key: Any = ...
  validate: Any = ...
  validators: Any = ...
  allow_none: bool = ...
  load_only: Any = ...
  dump_only: Any = ...
  required: Any = ...
  missing: Any = ...
  metadata: Any = ...
  error_messages: Any = ...

  def __init__(
    self,
    *,
    default: typing.Any = ...,
    missing: typing.Any = ...,
    data_key: str = ...,
    attribute: str = ...,
    validate: typing.Union[typing.Callable[[typing.Any], typing.Any],
                           typing.Sequence[typing.Callable[[typing.Any], typing.Any]],
                           typing.Generator[typing.Callable[[typing.Any], typing.Any], None,
                                            None]] = ...,
    required: bool = ...,
    allow_none: bool = ...,
    load_only: bool = ...,
    dump_only: bool = ...,
    error_messages: typing.Dict[str, str] = ...,
    **metadata: Any
  ) -> None:
    ...

  def __deepcopy__(self, memo: Any):
    ...

  def get_value(self, obj: Any, attr: Any, accessor: Optional[Any] = ..., default: Any = ...):
    ...

  def make_error(self, key: str, **kwargs: Any) -> ValidationError:
    ...

  def fail(self, key: str, **kwargs: Any) -> Any:
    ...

  def serialize(
    self,
    attr: str,
    obj: typing.Any,
    accessor: Optional[typing.Callable[[typing.Any, str, typing.Any], typing.Any]] = ...,
    **kwargs: Any
  ) -> Any:
    ...

  def deserialize(
    self,
    value: typing.Any,
    attr: str = ...,
    data: typing.Mapping[str, typing.Any] = ...,
    **kwargs: Any
  ) -> Any:
    ...

  @property
  def context(self):
    ...

  @property
  def root(self):
    ...


class Raw(Field):
  ...


class Nested(Field):
  default_error_messages: Any = ...
  nested: Any = ...
  only: Any = ...
  exclude: Any = ...
  many: Any = ...
  unknown: Any = ...

  def __init__(
    self,
    nested: typing.Union[SchemaABC, type, str, typing.Callable[[], SchemaABC]],
    *,
    default: typing.Any = ...,
    only: types.StrSequenceOrSet = ...,
    exclude: types.StrSequenceOrSet = ...,
    many: bool = ...,
    unknown: str = ...,
    **kwargs: Any
  ) -> None:
    ...

  @property
  def schema(self):
    ...


class Pluck(Nested):
  field_name: Any = ...

  def __init__(self, nested: Any, field_name: Any, **kwargs: Any) -> None:
    ...


class List(Field):
  default_error_messages: Any = ...
  inner: Any = ...
  only: Any = ...
  exclude: Any = ...

  def __init__(self, cls_or_instance: typing.Union[Field, type], **kwargs: Any) -> None:
    ...


class Tuple(Field):
  default_error_messages: Any = ...
  tuple_fields: Any = ...
  validate_length: Any = ...

  def __init__(self, tuple_fields: Any, *args: Any, **kwargs: Any) -> None:
    ...


class String(Field):
  default_error_messages: Any = ...


class UUID(String):
  default_error_messages: Any = ...


class Number(Field):
  num_type: typing.Type = ...
  default_error_messages: Any = ...
  as_string: Any = ...

  def __init__(self, *, as_string: bool = ..., **kwargs: Any) -> None:
    ...


class Integer(Number):
  num_type: Any = ...
  default_error_messages: Any = ...
  strict: Any = ...

  def __init__(self, *, strict: bool = ..., **kwargs: Any) -> None:
    ...


class Float(Number):
  num_type: Any = ...
  default_error_messages: Any = ...
  allow_nan: Any = ...

  def __init__(self, *, allow_nan: bool = ..., as_string: bool = ..., **kwargs: Any) -> None:
    ...


class Decimal(Number):
  num_type: Any = ...
  default_error_messages: Any = ...
  places: Any = ...
  rounding: Any = ...
  allow_nan: Any = ...

  def __init__(
    self,
    places: int = ...,
    rounding: str = ...,
    *,
    allow_nan: bool = ...,
    as_string: bool = ...,
    **kwargs: Any
  ) -> None:
    ...


class Boolean(Field):
  truthy: Any = ...
  falsy: Any = ...
  default_error_messages: Any = ...

  def __init__(self, *, truthy: typing.Set = ..., falsy: typing.Set = ..., **kwargs: Any) -> None:
    ...


class DateTime(Field):
  SERIALIZATION_FUNCS: typing.Dict[str, typing.Callable[[typing.Any], str]] = ...
  DESERIALIZATION_FUNCS: typing.Dict[str, typing.Callable[[str], typing.Any]] = ...
  DEFAULT_FORMAT: str = ...
  OBJ_TYPE: str = ...
  SCHEMA_OPTS_VAR_NAME: str = ...
  default_error_messages: Any = ...
  format: Any = ...

  def __init__(self, format: str = ..., **kwargs: Any) -> None:
    ...


class NaiveDateTime(DateTime):
  AWARENESS: str = ...
  timezone: Any = ...

  def __init__(self, format: str = ..., *, timezone: dt.timezone = ..., **kwargs: Any) -> None:
    ...


class AwareDateTime(DateTime):
  AWARENESS: str = ...
  default_timezone: Any = ...

  def __init__(
    self, format: str = ..., *, default_timezone: dt.timezone = ..., **kwargs: Any
  ) -> None:
    ...


class Time(Field):
  default_error_messages: Any = ...


class Date(DateTime):
  default_error_messages: Any = ...
  SERIALIZATION_FUNCS: Any = ...
  DESERIALIZATION_FUNCS: Any = ...
  DEFAULT_FORMAT: str = ...
  OBJ_TYPE: str = ...
  SCHEMA_OPTS_VAR_NAME: str = ...


class TimeDelta(Field):
  DAYS: str = ...
  SECONDS: str = ...
  MICROSECONDS: str = ...
  MILLISECONDS: str = ...
  MINUTES: str = ...
  HOURS: str = ...
  WEEKS: str = ...
  default_error_messages: Any = ...
  precision: Any = ...

  def __init__(self, precision: str = ..., **kwargs: Any) -> None:
    ...


class Mapping(Field):
  mapping_type: Any = ...
  default_error_messages: Any = ...
  key_field: Any = ...
  value_field: Any = ...
  only: Any = ...
  exclude: Any = ...

  def __init__(
    self,
    keys: typing.Union[Field, type] = ...,
    values: typing.Union[Field, type] = ...,
    **kwargs: Any
  ) -> None:
    ...


class Dict(Mapping):
  mapping_type: Any = ...


class Url(String):
  default_error_messages: Any = ...
  relative: Any = ...
  require_tld: Any = ...
  validators: Any = ...

  def __init__(
    self,
    *,
    relative: bool = ...,
    schemes: types.StrSequenceOrSet = ...,
    require_tld: bool = ...,
    **kwargs: Any
  ) -> None:
    ...


class Email(String):
  default_error_messages: Any = ...
  validators: Any = ...

  def __init__(self, *args: Any, **kwargs: Any) -> None:
    ...


class Method(Field):
  serialize_method_name: Any = ...
  deserialize_method_name: Any = ...

  def __init__(
    self, serialize: Optional[Any] = ..., deserialize: Optional[Any] = ..., **kwargs: Any
  ) -> None:
    ...


class Function(Field):
  serialize_func: Any = ...
  deserialize_func: Any = ...

  def __init__(
    self,
    serialize: typing.Union[typing.Callable[[typing.Any], typing.Any],
                            typing.Callable[[typing.Any, typing.Dict], typing.Any]] = ...,
    deserialize: typing.Union[typing.Callable[[typing.Any], typing.Any],
                              typing.Callable[[typing.Any, typing.Dict], typing.Any]] = ...,
    **kwargs: Any
  ) -> None:
    ...


class Constant(Field):
  constant: Any = ...
  missing: Any = ...
  default: Any = ...

  def __init__(self, constant: Any, **kwargs: Any) -> None:
    ...


class Inferred(Field):
  def __init__(self) -> None:
    ...


URL = Url
Str = String
Bool = Boolean
Int = Integer
