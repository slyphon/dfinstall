import typing
from typing import Any

SCHEMA: str

class MarshmallowError(Exception): ...

class ValidationError(MarshmallowError):
    messages: Any = ...
    field_name: Any = ...
    data: Any = ...
    valid_data: Any = ...
    kwargs: Any = ...
    def __init__(self, message: typing.Union[str, typing.List, typing.Dict], field_name: str=..., data: typing.Mapping[str, typing.Any]=..., valid_data: typing.Union[typing.List[typing.Dict[str, typing.Any]], typing.Dict[str, typing.Any]]=..., **kwargs: Any) -> None: ...
    def normalized_messages(self): ...

class RegistryError(NameError): ...
class StringNotCollectionError(MarshmallowError, TypeError): ...
class FieldInstanceResolutionError(MarshmallowError, TypeError): ...
